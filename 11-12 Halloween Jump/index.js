/* Kor√°bbi ismereteink √∂sszefoglal√°s√°ra ezt a Doodle Jumphoz hasonl√≥ Halloween Jump nev≈± j√°t√©kot fogjuk elk√©sz√≠teni 2 h√©ten kereszt√ºl. Min√©l magasabbra jutunk, ann√°l nagyobb val√≥sz√≠n≈±s√©ggel tal√°lkozunk mozg√≥ platformokkal √©s denev√©rekkel megtartva ezek kialakul√°s√°nak v√©letlenszer≈±s√©g√©t. */



const canvas = document.querySelector('canvas');
const ctx = canvas.getContext('2d');

/* === √ÅLLAPOTT√âR === */

/*Konstansok*/
const J√ÅT√âKOSSZ√âLESS√âG = 30;
const J√ÅT√âKOSMAGASS√ÅG = 30;
const J√ÅT√âKOSGYORSUL√ÅS = 450;
const PLATFORMSZ√âLESS√âG = 50;
const PLATFORMMAGASS√ÅG = 10;
const PLATFORMT√ÅV = 40;
const T√ÅRGYSZ√âLESS√âG = 20;
const T√ÅRGYMAGASS√ÅG = 20;

/*V√°ltoz√≥k*/

let k√©pek = {
    h√°tt√©r: new Image(),
    j√°t√©kos: new Image(),
    cukor1: new Image(),
    cukor2: new Image(),
    denev√©r: new Image(),
    sir: new Image(),
    platform: new Image(),
    kos√°r: new Image(),
}

k√©pek.h√°tt√©r.src = 'h√°tt√©r.png';
k√©pek.j√°t√©kos.src = 'j√°t√©kos.png';
k√©pek.cukor1.src = 'cukor1.png';
k√©pek.cukor2.src = 'cukor2.png';
k√©pek.denev√©r.src = 'denev√©r.png';
k√©pek.sir.src = 'sir.png';
k√©pek.platform.src = 'platform.png';
k√©pek.kos√°r.src = 'kos√°r.png';

let j√°t√©kos = {
    x: canvas.width / 2 - 15,
    y: canvas.height - 200,
    sz√©less√©g: J√ÅT√âKOSSZ√âLESS√âG,
    magass√°g: J√ÅT√âKOSMAGASS√ÅG,
    vy: 0,
    ay: J√ÅT√âKOSGYORSUL√ÅS
}

let gomb = {
    x: canvas.width / 2 - 50,
    y: 420,
    sz√©less√©g: 100,
    magass√°g: 40
}

let pont = 0;
let cukordb = 0;
let mozg√°sval = 1;
let v√©ge = false;
let √∂sszesen = 0;
let rekord = 0;

let billenty≈±k = [];
let platformok = [];
let t√°rgyak = [];

function p√°lyagener√°l√°s() {
    platformok = [];
    t√°rgyak = [];
    platformok.push({x: canvas.width / 2 - PLATFORMSZ√âLESS√âG / 2, y: canvas.height - PLATFORMMAGASS√ÅG * 6, sz√©less√©g: PLATFORMSZ√âLESS√âG, magass√°g: PLATFORMMAGASS√ÅG});
    √∫jPlatform();
    √∫jPlatform();
    √∫jPlatform();
    √∫jPlatform();
    √∫jPlatform();
    √∫jPlatform();
    √∫jPlatform();
    √∫jT√°rgy();
    √∫jT√°rgy();
    √∫jT√°rgy();
    √∫jT√°rgy();
}

p√°lyagener√°l√°s();

/* === ANIM√ÅCI√ìS CIKLUS === */
let el≈ëz≈ëId≈ë = performance.now()
function k√∂vetkez≈ë() {
    let aktu√°lisId≈ë = performance.now()
    let dt = (aktu√°lisId≈ë - el≈ëz≈ëId≈ë) / 1000 // az el≈ëz≈ë k√©pkocka √≥ta eltelt id≈ë mp-ben
    el≈ëz≈ëId≈ë = aktu√°lisId≈ë
    friss√≠t√©s(dt)
    rajzol√°s()
    requestAnimationFrame(k√∂vetkez≈ë)
}

k√∂vetkez≈ë();

function rajzol√°s() {
    if(!v√©ge) {
        // h√°tt√©r
        ctx.fillStyle = "#E53E3E";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(k√©pek.h√°tt√©r, -30, 40, canvas.height, canvas.height);

        ctx.beginPath();
        ctx.arc(canvas.width / 2 - 50, canvas.height + 140, 200, 0, 2 * Math.PI);
        ctx.fillStyle = '#012D4E';
        ctx.fill();
    

        //platformok
        platformok.forEach(platform => {
            ctx.drawImage(k√©pek.platform, platform.x, platform.y, platform.sz√©less√©g, platform.magass√°g);
        });

        // t√°rgyak
        t√°rgyak.forEach(t√°rgy => {
            if(t√°rgy.jelmez == 'denev√©r') {
                ctx.drawImage(k√©pek.denev√©r, t√°rgy.x, t√°rgy.y, t√°rgy.sz√©less√©g, t√°rgy.magass√°g);
            } else if (t√°rgy.jelmez == 'cukor1') {
                ctx.drawImage(k√©pek.cukor1, t√°rgy.x, t√°rgy.y, t√°rgy.sz√©less√©g, t√°rgy.magass√°g);
            } else if (t√°rgy.jelmez == 'cukor2') {
                ctx.drawImage(k√©pek.cukor2, t√°rgy.x, t√°rgy.y, t√°rgy.sz√©less√©g, t√°rgy.magass√°g);
            }
        });
    }

    // v√©ge k√©p √©s felirat
    if(v√©ge){
        √∂sszesen = pont + cukordb;
        // h√°tt√©r √°tmenet el≈ë√°ll√≠t√°sa
        const √°tmenet=ctx.createLinearGradient(0, 0, 240, 533);
        √°tmenet.addColorStop(0, "black");
        √°tmenet.addColorStop(1, "#463B83");
        // t√©glalap kit√∂lt√©se az √°tmenettel
        ctx.fillStyle = √°tmenet;
        ctx.fillRect(0,0, canvas.width, canvas.height);
        // 1. k√©p kirajzol√°sa
        let k√©p1x = 150;
        let k√©p1y = 500;
        let k√©p1w = 350;
        let k√©p1h = 350;
        let sz√∂g = -Math.PI / 12;
        ctx.save();
        ctx.translate(k√©p1x, k√©p1y);
        ctx.rotate(sz√∂g);
        ctx.drawImage(k√©pek.sir, 10, 10, -k√©p1w/2, -k√©p1h/2);
        ctx.restore();
        // l√°bl√©c
        ctx.fillStyle = "#012D4E";
        ctx.fillRect(0, canvas.height - 30, canvas.width, 30);
        // 2. k√©p kirajzol√°sa
        ctx.drawImage(k√©pek.kos√°r, 80, 515, -150/2, -150/2);
        // 3. k√©p kirajzol√°sa
        ctx.drawImage(k√©pek.denev√©r, 140, 40, 100, 100);

        ctx.font = '50px Arial';
        ctx.fillStyle = 'white';
        ctx.fillText('Pr√≥b√°ld', 35, 150);
        ctx.fillText('√∫jra', 80, 200);

        ctx.font = '40px Arial';
        ctx.fillStyle = '#FF8257';
        ctx.fillText(√∂sszesen, canvas.width / 2 - (√∂sszesen >= 10 ? 20 : 10), 270);
        ctx.font = '20px Arial';
        ctx.fillStyle = '#FF8257';
        ctx.fillText('LEGJOBB', 80, 330);
        ctx.fillText(rekord, canvas.width / 2 - 10, 360);

        ctx.fillStyle = 'white';
        ctx.fillRect(gomb.x, gomb.y, gomb.sz√©less√©g, gomb.magass√°g);

        /* // lekerek√≠tett gombot vonalk√©nt tudunk kirajzolni
        ctx.beginPath(); // vonalat fogunk rajzolni
        ctx.lineWidth = gomb.magass√°g; // vonal vastags√°ga
        ctx.strokeStyle = "white"; // vonal sz√≠ne
        ctx.lineCap = "round"; // vonalv√©g st√≠lusa (butt/round/square)
        ctx.moveTo(gomb.x, gomb.y); // kezd≈ëpont meghat√°roz√°sa
        ctx.lineTo(gomb.x + gomb.sz√©less√©g, gomb.y); // v√©gpont meghat√°roz√°sa
        ctx.stroke(); // vonal megrajzol√°sa */

        ctx.font = '30px Arial';
        ctx.fillStyle = 'black';
        ctx.fillText('√öJRA', gomb.x + gomb.sz√©less√©g / 9, gomb.y + gomb.magass√°g - gomb.magass√°g / 7);
    }

    // fejl√©c
    ctx.fillStyle = "#B22222";
    ctx.fillRect(0, 0, canvas.width, 30);

    // pontok
    ctx.font = '15px Arial';
    ctx.fillStyle = 'white';
    ctx.fillText('üç¨: ' + cukordb, 10, 20);
    ctx.fillText('ü™ô: ' + pont, 180, 20);

    // j√°t√©kos
    ctx.drawImage(k√©pek.j√°t√©kos, j√°t√©kos.x, j√°t√©kos.y, j√°t√©kos.sz√©less√©g, j√°t√©kos.magass√°g);
}

function friss√≠t√©s(dt) {
    elteltId≈ë = Math.round(Math.round(performance.now()) / 1000);
    
    // Eml√©keztet≈ë fizik√°b√≥l: v' = v + a * dt; illetve ds = v' * dt.
    j√°t√©kos.vy = j√°t√©kos.vy + j√°t√©kos.ay * dt;
    j√°t√©kos.y = j√°t√©kos.y + j√°t√©kos.vy * dt;

    // F√úGG≈êLEGES mozg√°s
    platformok.forEach(platform => {
        if(√ºtk√∂znek(j√°t√©kos, platform) && j√°t√©kos.vy > 0 && !v√©ge) {
            j√°t√©kos.vy = -300;
        }
    });

    // V√çZSZINTES mozg√°s
    if(!v√©ge) {
        if(billenty≈±k['ArrowRight']) {
            if(j√°t√©kos.x < canvas.width) {
                j√°t√©kos.x += j√°t√©kos.ay / 2 * dt;
            } else {
                j√°t√©kos.x = 0 - j√°t√©kos.sz√©less√©g;
            }
        }
        if(billenty≈±k['ArrowLeft']) {
            if(j√°t√©kos.x > 0 - j√°t√©kos.sz√©less√©g) {
                j√°t√©kos.x -= j√°t√©kos.ay / 2 * dt;
            } else {
                j√°t√©kos.x = canvas.width;
            }
        }
    }

    // √∫j platformok l√©trehoz√°sa
    if(platformok.length < 8) {
        √∫jabbPlatform();
    }

    // felfel√© halad√°s
    if(j√°t√©kos.y <= 150 && j√°t√©kos.vy < 0) {
        j√°t√©kos.y = 150;
        platformok.forEach(platform => {
            platform.y -= j√°t√©kos.vy * dt;
        });
    }

    // platformok t√∂rl√©se
    platformok.forEach(platform => {
        if(platform.y >= canvas.height) {
            platformok.splice(0, 1);
            pont += 1;
        }
    });

    // mozg√≥ platformok
    platformok.forEach(platform => {
        if(platform.mozog) {
            if(platform.ir√°ny == 1) {
                platform.x += 20 * dt;
                if(platform.x > canvas.width) {
                    platform.x = 0 - platform.sz√©less√©g;
                }
            } else {
                platform.x += -20 * dt;
                if(platform.x + platform.sz√©less√©g < 0) {
                    platform.x = canvas.width;
                }
            }
        }
    });
    if(pont > 0 && pont % 50 == 0) {
        mozg√°sval += 1;
        pont += 1;
    }

    //===============================

    // √∫j t√°rgyak l√©trehoz√°sa
    if(t√°rgyak.length < 4) {
        √∫jabbT√°rgy();
    }

    // felfel√© halad√°s
    if(j√°t√©kos.y <= 150 && j√°t√©kos.vy < 0) {
        j√°t√©kos.y = 150;
        t√°rgyak.forEach(t√°rgy => {
            t√°rgy.y -= j√°t√©kos.vy * dt;
        });
    }

    // t√°rgyak t√∂rl√©se
    t√°rgyak.forEach(t√°rgy => {
        if(t√°rgy.y >= canvas.height) {
            t√°rgyak.splice(0, 1);
        }
    });

    // mozg√≥ t√°rgyak
    t√°rgyak.forEach(t√°rgy => {
        if(t√°rgy.mozog) {
            if(t√°rgy.ir√°ny == 1) {
                t√°rgy.x += 20 * dt;
                if(t√°rgy.x > canvas.width) {
                    t√°rgy.x = 0 - t√°rgy.sz√©less√©g;
                }
            } else {
                t√°rgy.x += -20 * dt;
                if(t√°rgy.x + t√°rgy.sz√©less√©g < 0) {
                    t√°rgy.x = canvas.width;
                }
            }
        }
    });
    
    // cukorgy≈±jt√©s
    t√°rgyak.forEach(t√°rgy => {
        if(√ºtk√∂znek(j√°t√©kos, t√°rgy) && (t√°rgy.jelmez === 'cukor1' || t√°rgy.jelmez === 'cukor2')) {
            cukordb += 1;
            t√°rgyak.splice(t√°rgyak.indexOf(t√°rgy), 1);
        }
    });

    // j√°t√©k v√©ge
    t√°rgyak.forEach(t√°rgy => {
        if(√ºtk√∂znek(j√°t√©kos, t√°rgy) && t√°rgy.jelmez === 'denev√©r') {
            v√©ge = true;
        }
    });
    if(j√°t√©kos.y >= canvas.height) {
        v√©ge = true;
    }
}


/* === ESEM√âNYEK === */

// lenyomott billenty≈±k elt√°rol√°sa
document.addEventListener('keydown', e => {
    billenty≈±k[e.key] = true;
})

document.addEventListener('keyup', e => {
    billenty≈±k[e.key] = false;
})

// √∫jrakezd√©s kattint√°sa
document.addEventListener('click', function(e) {
    if(e.offsetX > gomb.x && e.offsetX < (gomb.x + gomb.sz√©less√©g) && e.offsetY > gomb.y && e.offsetY < (gomb.y + gomb.magass√°g)){
        kezd√©s();
    }
})


/* === SEG√âDF√úGGV√âNYEK === */

// √ºtk√∂z√©s
function √ºtk√∂znek(t√©glalap1, t√©glalap2) {
    return ! (
        t√©glalap2.x + t√©glalap2.sz√©less√©g <= t√©glalap1.x ||
        t√©glalap2.y + t√©glalap2.magass√°g <= t√©glalap1.y ||
        t√©glalap2.x >= t√©glalap1.x + t√©glalap1.sz√©less√©g ||
        t√©glalap2.y >= t√©glalap1.y + t√©glalap1.magass√°g
    )
}

// v√©letlen eg√©sz
function v√©letlenEg√©sz(min, max) {
    return Math.floor(Math.random() * (max - min + 1) ) + min;
}

// √∫j platform
function √∫jPlatform() {
    let √∫jx = v√©letlenEg√©sz(0, 244 - PLATFORMSZ√âLESS√âG);
    let √∫jy = v√©letlenEg√©sz(0, PLATFORMT√ÅV) + (7 - platformok.length) * 60;
    /*while(platformok.filter(e => (√∫jy > e.y - PLATFORMT√ÅV && √∫jy < e.y + PLATFORMMAGASS√ÅG + PLATFORMT√ÅV) || (√∫jy + PLATFORMMAGASS√ÅG > e.y - PLATFORMT√ÅV && √∫jy + PLATFORMMAGASS√ÅG < e.y + PLATFORMMAGASS√ÅG + PLATFORMT√ÅV)).length > 0) {
        √∫jy = v√©letlenEg√©sz(0, canvas.height - PLATFORMMAGASS√ÅG * 6);
    }*/
    platformok.push({x: √∫jx, y: √∫jy, sz√©less√©g: PLATFORMSZ√âLESS√âG, magass√°g: PLATFORMMAGASS√ÅG});
}

function √∫jabbPlatform() {
    let √∫jx = v√©letlenEg√©sz(0, 244 - PLATFORMSZ√âLESS√âG);
    let √∫jy = v√©letlenEg√©sz(0 - PLATFORMT√ÅV / 2, 0 - PLATFORMMAGASS√ÅG);
    if(v√©letlenEg√©sz(0, 10) < mozg√°sval) {
        platformok.push({x: √∫jx, y: √∫jy, sz√©less√©g: PLATFORMSZ√âLESS√âG, magass√°g: PLATFORMMAGASS√ÅG, mozog: true, ir√°ny: v√©letlenEg√©sz(0, 1)});
    } else {
        platformok.push({x: √∫jx, y: √∫jy, sz√©less√©g: PLATFORMSZ√âLESS√âG, magass√°g: PLATFORMMAGASS√ÅG, mozog: false, ir√°ny: v√©letlenEg√©sz(0, 1)});
    }
}

// √∫j t√°rgy
function √∫jT√°rgy() {
    let √∫jx = v√©letlenEg√©sz(0, 244 - J√ÅT√âKOSSZ√âLESS√âG);
    let √∫jy = v√©letlenEg√©sz(0, PLATFORMT√ÅV) + (4 - t√°rgyak.length) * 90;
    t√°rgyak.push({x: √∫jx, y: √∫jy, sz√©less√©g: T√ÅRGYSZ√âLESS√âG, magass√°g: T√ÅRGYMAGASS√ÅG, mozog: false, ir√°ny: v√©letlenEg√©sz(0, 1), jelmez: 'cukor1'});
}

function √∫jabbT√°rgy() {
    let √∫jx = v√©letlenEg√©sz(0, 244 - J√ÅT√âKOSSZ√âLESS√âG);
    let √∫jy = v√©letlenEg√©sz(0 - PLATFORMT√ÅV / 2, 0 - PLATFORMMAGASS√ÅG);
    if(v√©letlenEg√©sz(0, 10) < mozg√°sval) {
        if(v√©letlenEg√©sz(0, 10) < 2) {
            t√°rgyak.push({x: √∫jx, y: √∫jy, sz√©less√©g: T√ÅRGYSZ√âLESS√âG, magass√°g: T√ÅRGYMAGASS√ÅG, mozog: true, ir√°ny: v√©letlenEg√©sz(0, 1), jelmez: 'denev√©r'});
        } else if(v√©letlenEg√©sz(0, 10) < 4) {
            t√°rgyak.push({x: √∫jx, y: √∫jy, sz√©less√©g: T√ÅRGYSZ√âLESS√âG, magass√°g: T√ÅRGYMAGASS√ÅG, mozog: false, ir√°ny: v√©letlenEg√©sz(0, 1), jelmez: 'cukor1'});
        } else if(v√©letlenEg√©sz(0, 10) < 6) {
            t√°rgyak.push({x: √∫jx, y: √∫jy, sz√©less√©g: T√ÅRGYSZ√âLESS√âG, magass√°g: T√ÅRGYMAGASS√ÅG, mozog: false, ir√°ny: v√©letlenEg√©sz(0, 1), jelmez: 'cukor2'});
        }
    }
}

// j√°t√©k √∫jrakezd√©se
function kezd√©s() {
    v√©ge = false;
    j√°t√©kos.x = canvas.width / 2 - 15;
    j√°t√©kos.y = canvas.height - 200;
    j√°t√©kos.vy = 0;
    pont = 0;
    cukordb = 0;
    mozg√°sval = 1;
    if(√∂sszesen > rekord) {
        rekord = √∂sszesen;
    }
    √∂sszesen = 0;
    p√°lyagener√°l√°s();
}