/* Ennek a j√°t√©knak a t√≠pusa √©s logik√°ja jelent≈ësen elt√©r a kor√°bbi j√°t√©kokt√≥l, ugyanis ez egy
n√©gyzetr√°csalap√∫ j√°t√©k, ahol a szerepl≈ëvel csak a n√©gy ir√°ny valamelyik√©be tudunk l√©pni, ha ott nincs v√≠z.
A c√©l, hogy kijuttassuk a robotot a v√≠zre √©p√ºlt pall√≥-labirintusb√≥l.
√öj ismeretk√©nt jelenik meg a sz√°ml√°l√≥s ciklus, a t√∂bb esetet tartalmaz√≥ el√°gaz√°s.

KAPCSOLAT A SCRATCH FEJLESZT≈êI K√ñRNYEZETTEL:
h√°tt√©r          = p√°lya elt√°rol√°sa sz√∂vegek t√∂mbjek√©nt */



const canvas = document.querySelector('canvas');
const ctx = canvas.getContext('2d');

/* === √ÅLLAPOTT√âR === */

/*P√°lya t√°rol√°sa*/
let p√°lya = [
    "VVVVVVV V",
    "V       V",
    "V VV VV V",
    "VVV     V",
    "V   V V V",
    "V VV  V V",
    "VRV   V V",
    "VVVVVVVVV"
];

/*Konstansok*/
const M = 40; // mez≈ëm√©ret

let robotk√©p = new Image();
robotk√©p.src = 'robot.png';

/*V√°ltoz√≥k*/
// robot
let robot = {
    x: 0,
    y: 0,
    sz√©less√©g: M,
    magass√°g: M,    
    hi: 300,    // halad√°s id≈ëtartama szomsz√©dos mez≈ëre (m√©rt√©kegys√©g: ms)
    kezdx: 0,   // halad√°s kezd≈ë x poz√≠ci√≥ja (mez≈ë)
    kezdy: 0,   // halad√°s kezd≈ë y poz√≠ci√≥ja (mez≈ë)
    kezdi: 0,   // halad√°s kezd≈ë id≈ëpontja (ms)
    v√©gx: 0,    // halad√°s v√©gs≈ë x poz√≠ci√≥ja (mez≈ë)
    v√©gy: 0     // halad√°s v√©gs≈ë y poz√≠ci√≥ja (mez≈ë)
}

// egy√©b v√°ltoz√≥k
let vizek = [];
let billenty≈±k = [];

let mozog = false;
let vesztett√©l = false;
let nyert√©l = false;


// a p√°lya t√∂mb bej√°r√°sa sorfolytonosan
for (let y = 0; y < p√°lya.length; y++) {
    for (let x = 0; x < p√°lya[y].length; x++) {
        switch (p√°lya[y][x]) {
            case "V":
                vizek.push({ x: x, y: y, sz√©less√©g: M, magass√°g: M })
                break;
            case "R":
                robot.x = x;
                robot.y = y;
                robot.kezdx = x;
                robot.kezdy = y;
                robot.v√©gx = x;
                robot.v√©gy = y;
                break;
        }
    }    
}


/* === ANIM√ÅCI√ìS CIKLUS === */

//let id≈ë = performance.now();

k√∂vetkez≈ë(); // az anim√°ci√≥ elind√≠t√°sa

function k√∂vetkez≈ë() {
    id≈ë = performance.now();
    friss√≠t√©s(id≈ë); // √°llapott√©r friss√≠t√©se
    rajzol√°s(); // k√©pkocka √∫jrarajzol√°sa
    if(!vesztett√©l && !nyert√©l) {
        requestAnimationFrame(k√∂vetkez≈ë);
    }
}

function rajzol√°s() {
    // h√°tt√©r
    ctx.fillStyle = 'orange';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // vizek
    ctx.fillStyle = 'lightblue';
    vizek.forEach(v√≠z => {
        ctx.fillRect(v√≠z.x * M, v√≠z.y * M, v√≠z.sz√©less√©g, v√≠z.magass√°g);
    });

    // robot
    ctx.drawImage(robotk√©p, robot.x * M, robot.y * M, robot.sz√©less√©g, robot.magass√°g);
    
    // nyertes sz√∂veg
    if(nyert√©l) {
        ctx.font = '80px Arial';
        ctx.fillStyle = 'black';
        ctx.fillText('Nyert√©l', 50, 170);
    }

    // v√≠zbe es√©s
    if(vesztett√©l) {
        ctx.font = '40px Arial';
        ctx.fillStyle = 'black';
        ctx.fillText('üåäV√≠zbe est√©lüåä', 30, 170);
    }
    
    // id≈ë
    ctx.font = '20px Arial';
    ctx.fillStyle = 'black';
    ctx.fillText('‚åõ: ' + Math.floor(id≈ë / 1000), 10, 30);
}

function friss√≠t√©s(dt) {
    // Billenty≈±k figyel√©se
    if (!mozog) {
        if (billenty≈±k['ArrowDown']) {
            mozgasIranyban(0, -1);
        }
        if (billenty≈±k['ArrowUp']) {
            mozgasIranyban(0, 1);
        }
        if (billenty≈±k['ArrowLeft']) {
            mozgasIranyban(1, 0);
        }
        if (billenty≈±k['ArrowRight']) {
            mozgasIranyban(-1, 0);
        }
    }

    // robot cs√∫sztat√°sa
    let id≈ëK√ºl = id≈ë - robot.kezdi;     // minden k√©perny≈ëfriss√≠t√©sn√©l kisz√°molja, mennyi id≈ë telt el a robot elindul√°sa √≥ta ms-ban
    if(id≈ëK√ºl < robot.hi) {             // ha ez az id≈ëk√ºl√∂nbs√©g kisebb, mint a halad√°s id≈ëtartama, akkor
        let ar√°ny = id≈ëK√ºl / robot.hi;  // ez alapj√°n √∫jrasz√°molunk egy ar√°nyt (0 √©s 1 k√∂z√∂tti √©rt√©k)
        robot.x = robot.kezdx + (robot.v√©gx - robot.kezdx) * ar√°ny;  // az ar√°nnyal friss√≠tj√ºk a robot helyzet√©t
        robot.y = robot.kezdy + (robot.v√©gy - robot.kezdy) * ar√°ny;
    } else {    // k√ºl√∂nben ha a robot indul√°sa √≥ta eltelt id≈ë ms-ban nagyobb vagy egyenl≈ë, mint az ≈ë halad√°si ideje (vagyis amennyi ms alatt oda kell √©rnie a c√©lba), akkor tegy√ºk ≈ët a c√©lhelyre
        robot.x = robot.v√©gx;
        robot.y = robot.v√©gy;
        mozog = false;
    }

    // c√©lba √©r√©s
    if(robot.x == 7 && robot.y == 0) {
        nyert√©l = true;
    }
}

/* === ESEM√âNYEK === */

// lenyomott billenty≈±k elt√°rol√°sa
document.addEventListener('keydown', e => {
    billenty≈±k[e.key] = true;
})

document.addEventListener('keyup', e => {
    billenty≈±k[e.key] = false;
})

function mozgasIranyban(x, y) {
    const ujX = robot.x + x;
    const ujY = robot.y + y;

    // Ellen≈ërz√©s: a c√©lpont a p√°lya hat√°rain bel√ºl van-e, √©s √ºres helyre l√©p-e
    if (ujY >= 0 && ujY < p√°lya.length && ujX >= 0 && ujX < p√°lya[0].length && p√°lya[ujY][ujX] == " " || p√°lya[ujY][ujX] == "R") {
        robot.v√©gx = ujX;
        robot.v√©gy = ujY;
        robot.kezdi = performance.now(); // Mozg√°s kezd√©si id≈ëpontja
        robot.kezdx = robot.x;          // Jelenlegi poz√≠ci√≥ ment√©se
        robot.kezdy = robot.y;
        mozog = true;
    } else {
        vesztett√©l = true;
    }
}